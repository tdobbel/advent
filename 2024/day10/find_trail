#!/usr/bin/env bash

declare -A grid

nx=0
ny=0
start_keys=()
while read -r line; do
    nx=${#line}
    for ((ix = 0; ix < nx; ix++)); do
        key="$ix,$ny"
        val="${line:$ix:1}"
        if (( val == 0 )); then
            start_keys+=("$key")
        fi
        grid["$ix,$ny"]=$val
    done
    ((ny++))
done

plot_grid() {
    for ((iy = 0; iy < ny; iy++)); do
        for ((ix = 0; ix < nx; ix++)); do
            key="$ix,$iy"
            printf "%s" "${grid[$key]}"
        done
        printf "\n"
    done
}

pos=()

find_nines() {
    local x=$1
    local y=$2
    local val="${grid[$x,$y]}"
    local key="$x,$y"
    if [[ "${grid[$key]}" == 9 ]]; then
        pos+=( "$key" )
        return
    fi
    local xnew
    local diff
    local neighbor
    local shifts=("0 -1" "0 1" "-1 0" "1 0")
    for shift in "${shifts[@]}"; do
        read -r dx dy <<< "$shift"
        xnew=$((x + dx))
        ynew=$((y + dy))
        if (( xnew < 0 || xnew >= nx || ynew < 0 || ynew >= ny )); then
            continue
        fi
        neighbor=${grid[$xnew,$ynew]}
        diff=$((neighbor-val))
        if (( diff == 1 )); then
            find_nines $xnew $ynew
        fi
    done
}

total1=0
total2=0
for key in "${start_keys[@]}"; do
    IFS="," read -r x y <<< "$key"
    find_nines $x $y
    upos=($(printf "%s\n" "${pos[@]}" | sort -u))
    n1=${#upos[@]}
    n2=${#pos[@]}
    total1=$((total1+n1))
    total2=$((total2+n2))
    pos=()
done

echo "Tota score part 1: $total1"
echo "Tota score part 2: $total2"
