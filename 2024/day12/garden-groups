#!/usr/bin/env bash

declare -A plots
declare -A visited
declare -a measures

declare -a fences
n_corners=0

directions=("UP" "RIGHT" "DOWN" "LEFT")

nx=0
ny=0
while read -r line; do
    nx=${#line}
    for ((x = 0; x < nx; x++)); do
        key="$x,$ny"
        plots[$key]="${line:$x:1}"
        visited[$key]=false
    done
    ((ny++))
done

add-fence() {
    local x=$1
    local y=$2
    local dir=$3
    local xa ya xb yb
    case $dir in
    "UP")
        ((xa = x + 1))
        ((ya = y))
        ((xb = x))
        ((yb = y))
        ;;
    "LEFT")
        ((xa = x))
        ((ya = y))
        ((xb = x))
        ((yb = y + 1))
        ;;
    "DOWN")
        ((xa = x))
        ((ya = y + 1))
        ((xb = x + 1))
        ((yb = y + 1))
        ;;
    "RIGHT")
        ((xa = x + 1))
        ((ya = y + 1))
        ((xb = x + 1))
        ((yb = y))
        ;;
    esac
    fences+=("$xa,$ya,$xb,$yb")
}

count-corners() {
    local ifirst=0
    local icurr=0
    local n=${#fences[@]}
    n_corners=0
    local xa ya xb yb
    local xc yc xd yd
    while ((icurr < n)); do
        IFS="," read -r xa ya xb yb <<<"${fences[icurr]}"
        IFS="," read -r xc yc xd yd <<<"${fences[ifirst]}"
        if ((xb == xc && yb == yc)); then
            local ua=$((xb - xa))
            local va=$((yb - ya))
            local ub=$((xd - xc))
            local vb=$((yd - yc))
            ((ua != ub || va != vb)) && ((n_corners++))
            ifirst=$((icurr + 1))
            icurr=$ifirst
            continue
        fi
        for ((i = (icurr + 1); i < n; i++)); do
            IFS="," read -r xc yc xd yd <<<"${fences[i]}"
            if ((xb == xc && yb == yc)); then
                local ua=$((xb - xa))
                local va=$((yb - ya))
                local ub=$((xd - xc))
                local vb=$((yd - yc))
                ((ua != ub || va != vb)) && ((n_corners++))
                local j=$((icurr + 1))
                local tmp=${fences[$j]}
                fences[j]=${fences[i]}
                fences[i]=$tmp
                ((icurr++))
                break
            fi
        done
    done
}

area_perimeter() {
    local pos=$1
    local crop=${plots[$pos]}
    local area=0
    local perimeter=0
    local queue=("$pos")
    visited[$pos]=true
    fences=()
    local key x y x_new y_new
    while ((${#queue[@]} > 0)); do
        pos=${queue[0]}
        queue=("${queue[@]:1}")
        ((area++))
        IFS="," read -r x y <<<"$pos"
        for dir in "${directions[@]}"; do
            case $dir in
            "UP")
                key="$x,$((y - 1))"
                ;;
            "RIGHT")
                key="$((x + 1)),$y"
                ;;
            "DOWN")
                key="$x,$((y + 1))"
                ;;
            "LEFT")
                key="$((x - 1)),$y"
                ;;
            esac
            IFS="," read -r x_new y_new <<<"$key"
            if ((x_new < 0 || x_new >= nx || y_new < 0 || y_new >= ny)); then
                ((perimeter++))
                add-fence "$x" "$y" "$dir"
                continue
            fi
            local other_crop=${plots[$key]}
            if [[ "$other_crop" != "$crop" ]]; then
                ((perimeter++))
                add-fence "$x" "$y" "$dir"
                continue
            fi
            if ${visited[$key]}; then
                continue
            fi
            queue+=("$key")
            visited[$key]=true
        done
    done
    count-corners
    measures+=("$area,$perimeter,$n_corners")
}

for ((y = 0; y < ny; y++)); do
    for ((x = 0; x < nx; x++)); do
        key="$x,$y"
        if ${visited[$key]}; then continue; fi
        area_perimeter $key
    done
done

part1=0
part2=0
for entry in "${measures[@]}"; do
    IFS="," read -r area perimeter crnrs <<<"$entry"
    part1=$((part1 + area * perimeter))
    part2=$((part2 + area * crnrs))
done

echo "Part 1: $part1"
echo "Part 2: $part2"
